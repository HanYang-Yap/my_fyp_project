{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://D%3A/GitHub/fyp_flask_project/frontend/src/app/api/user/target-schools/route.js"],"sourcesContent":["import { NextResponse } from 'next/server'\r\nimport { PrismaClient } from '@prisma/client'\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nexport async function PUT(request) {\r\n    try {\r\n        const { targetSchools } = await request.json()\r\n        \r\n        // TODO: Get user ID from session/auth\r\n        // const userId = session.user.id\r\n\r\n        // Update the database with new ranks\r\n        // Example using prisma:\r\n        // await prisma.targetSchool.deleteMany({\r\n        //     where: { userId: userId }\r\n        // });\r\n        \r\n        // await prisma.targetSchool.createMany({\r\n        //     data: targetSchools.map(school => ({\r\n        //         userId: userId,\r\n        //         schoolName: school.schoolName,\r\n        //         departmentName: school.departmentName,\r\n        //         rank: school.rank\r\n        //     }))\r\n        // });\r\n\r\n        return NextResponse.json({ success: true })\r\n    } catch (error) {\r\n        console.error('Error updating school ranks:', error)\r\n        return NextResponse.json(\r\n            { error: 'Failed to update school ranks' },\r\n            { status: 500 }\r\n        )\r\n    }\r\n}\r\n\r\nexport async function GET() {\r\n    try {\r\n        // Get user's target schools from database\r\n        const targetSchools = await prisma.targetSchool.findMany({\r\n            include: {\r\n                school: true,\r\n                department: true\r\n            }\r\n        })\r\n\r\n        return NextResponse.json(targetSchools)\r\n    } catch (error) {\r\n        console.error('Error fetching target schools:', error)\r\n        return NextResponse.json({ error: 'Failed to fetch target schools' }, { status: 500 })\r\n    }\r\n} "],"names":[],"mappings":";;;;AAAA;;;;;;;;AAGA,MAAM,SAAS,IAAI;AAEZ,eAAe,IAAI,OAAO;IAC7B,IAAI;QACA,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE5C,sCAAsC;QACtC,iCAAiC;QAEjC,qCAAqC;QACrC,wBAAwB;QACxB,yCAAyC;QACzC,gCAAgC;QAChC,MAAM;QAEN,yCAAyC;QACzC,2CAA2C;QAC3C,0BAA0B;QAC1B,yCAAyC;QACzC,iDAAiD;QACjD,4BAA4B;QAC5B,UAAU;QACV,MAAM;QAEN,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC7C,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,OAAO;QAAgC,GACzC;YAAE,QAAQ;QAAI;IAEtB;AACJ;AAEO,eAAe;IAClB,IAAI;QACA,0CAA0C;QAC1C,MAAM,gBAAgB,MAAM,OAAO,YAAY,CAAC,QAAQ,CAAC;YACrD,SAAS;gBACL,QAAQ;gBACR,YAAY;YAChB;QACJ;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiC,GAAG;YAAE,QAAQ;QAAI;IACxF;AACJ","debugId":null}}]
}